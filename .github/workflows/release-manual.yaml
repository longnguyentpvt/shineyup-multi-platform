name: Release Manual

on:
  workflow_dispatch:
    inputs:
      apps:
        description: 'Please fill your app release tags'
        required: true
        type: string

jobs:
  define-apps:
    runs-on: ubuntu-22.04
    outputs:
      apps: ${{ steps.split_inputs.outputs.apps }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract tags from inputs
        id: split_inputs
        run: |
          chmod +x ./deployments/format_input_to_json.sh
          APPS_JSON=$(./deployments/format_input_to_json.sh "${{ github.event.inputs.apps }}")
          echo "apps=$APPS_JSON" >> $GITHUB_OUTPUT

  build:
    needs: define-apps
    runs-on: ubuntu-22.04
    environment: sy-ovh
    strategy:
      matrix:
        app: ${{fromJson(needs.define-apps.outputs.apps)}}
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx 
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: 'Get tag version'
        run: |
          TAGNAME="${{ matrix.app }}"
          APP_NAME=$(echo "$TAGNAME" | cut -d'/' -f2)
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          VER=${TAGNAME##*/}
          echo "Appname $APP_NAME"
          echo "Version $VER"
          APP_VER=$(yarn workspace @shineyup/$APP_NAME version --$VER --no-git-tag-version | grep 'info New version:' | awk '{print $4}')
          echo "VERSION=$APP_VER" >> $GITHUB_ENV

      - name: 'Install dependencies'
        run: |
          yarn --frozen-lockfile
          yarn workspace @shineyup/${{ env.APP_NAME }} build
      
      - name: Build and push image
        run: |
          chmod +x ./deployments/${{ env.APP_NAME }}-docker-build.sh
          ./deployments/${{ env.APP_NAME }}-docker-build.sh "${{ env.VERSION }}"
          ./deployments/${{ env.APP_NAME }}-docker-build.sh "latest"

      - name: Release tag
        run: |
          git config --global user.email ""
          git config --global user.name "GitHub_Actions"
          git fetch
          git pull --no-rebase
          git add -A
          git commit -m "${{ env.APP_NAME }} version ${{ env.VERSION }}"
          git push
          git tag -a "app/${{env.APP_NAME}}/${{ env.VERSION }}" -m "${{ env.APP_NAME }} version ${{ env.VERSION }}"
          git push --tags

  deploy:
    needs: [define-apps, build]
    runs-on: ubuntu-22.04
    environment: sy-ovh
    strategy:
      matrix:
        app: ${{fromJson(needs.define-apps.outputs.apps)}}
    steps:
      - uses: actions/checkout@v4
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User ubuntu
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.STAGING_PEM }}
          SSH_HOST: ${{ secrets.STAGING_HOST }}

      - name: 'Get app name'
        run: |
          TAGNAME="${{ matrix.app }}"
          APP_NAME=$(echo "$TAGNAME" | cut -d'/' -f2)
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Restart the app
        run: |
          chmod +x ./deployments/${{ env.APP_NAME }}-start.sh
          ./deployments/${{ env.APP_NAME }}-start.sh